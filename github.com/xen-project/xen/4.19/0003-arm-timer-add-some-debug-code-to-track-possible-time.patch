From d8002e759f2311d6f2cf54eae7207bc2b71ad0b6 Mon Sep 17 00:00:00 2001
From: Volodymyr Babchuk <volodymyr_babchuk@epam.com>
Date: Thu, 9 Jan 2025 02:06:59 +0200
Subject: [PATCH] arm: timer: add some debug code to track possible timer...

...discrepancies

Signed-off-by: Volodymyr Babchuk <volodymyr_babchuk@epam.com>
---
 xen/arch/arm/time.c | 29 +++++++++++++++++++++++++++++
 1 file changed, 29 insertions(+)

diff --git a/xen/arch/arm/time.c b/xen/arch/arm/time.c
index e74d30d258..a13eaf4248 100644
--- a/xen/arch/arm/time.c
+++ b/xen/arch/arm/time.c
@@ -220,6 +220,9 @@ s_time_t get_s_time(void)
 /* Set the timer to wake us up at a particular time.
  * Timeout is a Xen system time (nanoseconds since boot); 0 disables the timer.
  * Returns 1 on success; 0 if the timeout is too soon or is in the past. */
+
+DEFINE_PER_CPU(uint64_t, cur_deadline);
+
 int reprogram_timer(s_time_t timeout)
 {
     uint64_t deadline;
@@ -231,6 +234,7 @@ int reprogram_timer(s_time_t timeout)
     }
 
     deadline = ns_to_ticks(timeout) + boot_count;
+    this_cpu(cur_deadline) = deadline;
     WRITE_SYSREG64(deadline, CNTHP_CVAL_EL2);
     WRITE_SYSREG(CNTx_CTL_ENABLE, CNTHP_CTL_EL2);
     isb();
@@ -243,8 +247,17 @@ int reprogram_timer(s_time_t timeout)
 /* Handle the firing timer */
 static void htimer_interrupt(int irq, void *dev_id)
 {
+    uint64_t cycles;
+
     if ( unlikely(!(READ_SYSREG(CNTHP_CTL_EL2) & CNTx_CTL_PENDING)) )
+    {
+        printk("PT: Spurious timer interrupt!\n");
         return;
+    }
+
+    cycles = get_cycles();
+    if ( unlikely(this_cpu(cur_deadline) < cycles) )
+        printk("PT: Event from the future: %ld < %ld\n", this_cpu(cur_deadline), cycles);
 
     perfc_incr(hyp_timer_irqs);
 
@@ -255,8 +268,11 @@ static void htimer_interrupt(int irq, void *dev_id)
     WRITE_SYSREG(0, CNTHP_CTL_EL2);
 }
 
+DEFINE_PER_CPU(uint64_t, cur_vtimer);
+
 static void vtimer_interrupt(int irq, void *dev_id)
 {
+    uint64_t vcycles = READ_SYSREG64(CNTVCT_EL0);
     /*
      * Edge-triggered interrupts can be used for the virtual timer. Even
      * if the timer output signal is masked in the context switch, the
@@ -267,9 +283,22 @@ static void vtimer_interrupt(int irq, void *dev_id)
      * If an IDLE vCPU was scheduled next then we should ignore the
      * interrupt.
      */
+
+
+    if ( unlikely(!(READ_SYSREG(CNTV_CTL_EL0) & CNTx_CTL_PENDING)) )
+    {
+        printk("VT: Spurious timer interrupt!\n");
+        return;
+    }
+
     if ( unlikely(is_idle_vcpu(current)) )
         return;
 
+    if ( unlikely(ticks_to_ns(vcycles - this_cpu(cur_vtimer)) < 5000) )
+        printk("VT: possible IRQ storm: prev IRQ was %ld nsec ago\n",
+               ticks_to_ns(vcycles - this_cpu(cur_vtimer)));
+
+    this_cpu(cur_vtimer) = vcycles;
     perfc_incr(virt_timer_irqs);
 
     current->arch.virt_timer.ctl = READ_SYSREG(CNTV_CTL_EL0);
-- 
2.47.1

